AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet1CIDR
      AvailabilityZone: !Ref Subnet1Zone
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
    DependsOn:
      - VPC
      - VPCGatewayAttachment
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
    DependsOn:
      - Subnet1
      - Subnet2
      - Subnet3
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  myPublicRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1
  myPublicRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet2
  myPublicRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet3
  myPublicRouteTableAssociation4:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTableDBS
      SubnetId: !Ref Subnet4
  myPublicRouteTableAssociation5:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTableDBS
      SubnetId: !Ref Subnet5
  myPublicRouteTableAssociation6:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTableDBS
      SubnetId: !Ref Subnet6
  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet2CIDR
      AvailabilityZone: !Ref Subnet2Zone
  Subnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet3CIDR
      AvailabilityZone: !Ref Subnet3Zone
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        # - IpProtocol: tcp
        #   FromPort: 8080
        #   ToPort: 8080
        #   CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp: 0.0.0.0/0
  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - !Ref EnvName
          - kanzhang
          - me

      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Prefix: ''
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Description: 'Allow ec2 instance talk to s3 bucket and use cloud watch agent'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: InstanceControlPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                Resource:
                  - !Sub arn:aws:s3:::${Bucket}
                  - !Sub arn:aws:s3:::${Bucket}/*
                  - !Sub arn:aws:s3:::${WebSourceBucket}
                  - !Sub arn:aws:s3:::${WebSourceBucket}/*
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref SNSTopic
              - Effect: Allow
                Action: 
                  - dynamodb:Get*
                  - dynamodb:PutItem
                  - dynamodb:Update*
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                Resource: !GetAtt DynamoDBEmailTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
     
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-WebAppS3-profile
      Roles:
        - !Ref InstanceRole

  # WebServerInstance:
  #   Type: 'AWS::EC2::Instance'
  #   Properties:
  #     InstanceType: !Ref InstanceType
  #     ImageId: !Ref ImageId
  #     KeyName: !Ref KeyName
  #     IamInstanceProfile: !Ref InstanceProfile
  #     NetworkInterfaces:
  #       - GroupSet:
  #           - !Ref WebServerSecurityGroup
  #         AssociatePublicIpAddress: 'true'
  #         DeviceIndex: '0'
  #         DeleteOnTermination: 'true'
  #         SubnetId: !Ref Subnet1
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sdm
  #         Ebs:
  #           VolumeType: gp2
  #           DeleteOnTermination: 'true'
  #           VolumeSize: '20'
  #     Tags:
  #       - Key: Label
  #         Value: codedeploy
  #       - Key: cloudwatch
  #         Value: ''
  #     UserData: 
  #         Fn::Base64: 
  #           Fn::Join: ["", [
  #             "#!/bin/bash -xe \n",
  #             "yum install -y aws-cfn-bootstrap\n",
  #             "yum install -y mariadb\n",
  #             "cd /var/webapp \n",
  #             "echo spring.jpa.hibernate.ddl-auto=update >> application.properties \n",
  #             "echo spring.datasource.url=jdbc:mysql://",!GetAtt RDSInstance.Endpoint.Address,"/csye6225 >> application.properties\n",
  #             "echo spring.datasource.username=",!Ref DBUsername,">> application.properties\n",
  #             "echo spring.datasource.password=",!Ref DBPassword,">> application.properties\n",
  #             "echo spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver >> application.properties\n",
  #             !Sub "echo bucketName=${Bucket}>> application.properties\n",
  #             !Sub "echo dynamoTableName=${DynamoTableName} >> application.properties\n",
  #             !Sub "echo domain=${EnvName}.${DomainName} >> application.properties\n",
  #             "echo topicArn=",!Ref SNSTopic,">> application.properties\n",
  #             "echo webWorkDir=$PWD/ >> application.properties\n",
  #             "echo logging.level.root=INFO >> application.properties\n",
  #             "echo logging.level.org.springframework.web=ERROR >> application.properties\n",
  #             "echo logging.level.org.hibernate=ERROR >> application.properties\n",
  #             "echo logging.file.name=/var/log/csye6225.log >> application.properties\n",
  #             "echo logging.pattern.file= '%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n' >> application.properties\n"
  #             ]]  
  #   DependsOn:
  #     - PublicRoute
  Subnet4:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet4CIDR
      AvailabilityZone: !Ref Subnet4Zone
  Subnet5:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet5CIDR
      AvailabilityZone: !Ref Subnet5Zone
  Subnet6:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet6CIDR
      AvailabilityZone: !Ref Subnet6Zone
  RouteTableDBS:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
    DependsOn:
      - Subnet4
      - Subnet5
      - Subnet6
  DBSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from Web Security Group to Database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  RDSParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: RDS parameter group
      Family: mysql8.0
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB subnet group
      DBSubnetGroupName: !Join 
        - ''
        - - DBSubnetGroup
          - !Ref 'AWS::StackName'
      SubnetIds:
        - !Ref Subnet4
        - !Ref Subnet5
        - !Ref Subnet6
  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: csye6225
      Engine: mysql
      MultiAZ: false
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Sub ${AWS::StackName}-csye6225
      DBParameterGroupName: !Ref RDSParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: false
      StorageEncrypted: true
      KmsKeyId: !GetAtt RDSKMSKey.Arn
      VPCSecurityGroups:
        - !Ref DBSSecurityGroup
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: RDSInstance
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'  
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs:
            VolumeSize: 20
            VolumeType: "gp2"
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !GetAtt EBSKMSKey.Arn
        ImageId: !Ref ImageId
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        IamInstanceProfile: 
          Name: !Ref InstanceProfile
        NetworkInterfaces:
          - AssociatePublicIpAddress: 'true'
            DeleteOnTermination: 'true'
            DeviceIndex: '0'
            Groups: 
              - !Ref WebServerSecurityGroup
            SubnetId: !Ref Subnet1
        UserData: 
          Fn::Base64: 
            Fn::Join: ["", [
              "#!/bin/bash -xe \n",
              "yum install -y aws-cfn-bootstrap\n",
              "yum install -y mariadb\n",
              "cd /var/webapp \n",
              "echo spring.jpa.hibernate.ddl-auto=update >> application.properties \n",
              "echo spring.datasource.url=jdbc:mysql://",!GetAtt RDSInstance.Endpoint.Address,"/csye6225 >> application.properties\n",
              "echo spring.datasource.username=",!Ref DBUsername,">> application.properties\n",
              "echo spring.datasource.password=",!Ref DBPassword,">> application.properties\n",
              "echo spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver >> application.properties\n",
              !Sub "echo bucketName=${Bucket}>> application.properties\n",
              !Sub "echo dynamoTableName=${DynamoTableName} >> application.properties\n",
              !Sub "echo domain=${EnvName}.${DomainName} >> application.properties\n",
              "echo topicArn=",!Ref SNSTopic,">> application.properties\n",
              "echo webWorkDir=$PWD/ >> application.properties\n",
              "echo logging.level.root=INFO >> application.properties\n",
              "echo logging.level.org.springframework.web=ERROR >> application.properties\n",
              "echo logging.level.org.hibernate=ERROR >> application.properties\n",
              "echo logging.file.name=/var/log/csye6225.log >> application.properties\n",
              "echo logging.pattern.file= '%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n' >> application.properties\n"
              ]]  
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - !Ref Subnet1Zone 
      Cooldown: '60'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '1'    
      MinSize: '1'
      DesiredCapacity: '1'
      NewInstancesProtectedFromScaleIn: false
      TargetGroupARNs: 
        - !Ref LoadBalancerTargetGroup
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
    DependsOn:
      - VPCGatewayAttachment
  CPUAlarmAbove5:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmActions: 
        - !Ref CPUScaleOutPolicy 
      AlarmDescription: "Average CPU metric above 5"
      AlarmName: !Sub ${AWS::StackName}-CPU-Alarm-Above5
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      EvaluationPeriods: 1
      Period: 60
      Statistic: Average
      Threshold: 5
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
  CPUAlarmBelow3:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmActions: 
        - !Ref CPUScaleInPolicy
      AlarmDescription: "Average CPU metric below 3"
      AlarmName: !Sub ${AWS::StackName}-CPU-Alarm-Below3
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 3
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
  CPUScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: "1"
  CPUScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: "-1"
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
    DependsOn:
      - VPCGatewayAttachment
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Certificates: 
        - !Ref SSLCertificate
      Port: 443 
      Protocol: HTTPS
  DNSRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      HostedZoneName: !Sub ${EnvName}.kanzhang.me.
      RecordSets: 
        - Name: !Sub ${EnvName}.kanzhang.me
          AliasTarget:
            DNSName: !GetAtt LoadBalancer.DNSName
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
          Type: A
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      Description: "Role for Code Deploy itself to get the access"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Tags:
        - Key: Name
          Value: CodeDeployServiceRole
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: csye6225-webapp
      ComputePlatform: Server
  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      AutoScalingGroups: 
        - !Ref AutoScalingGroup
      ApplicationName: !Ref CodeDeployApp
      AutoRollbackConfiguration:
        Enabled: True 
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: csye6225-webapp-deployment
      DeploymentStyle: 
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      Ec2TagFilters: 
        - Key: Label
          Value: codedeploy
          Type: KEY_AND_VALUE
  DynamoDBEmailTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Email
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref DynamoTableName
      TimeToLiveSpecification: 
        AttributeName: ExpirationTime
        Enabled: true
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: LambdaServiceRole
  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Lambda-DynamoDB-SES-SNS-Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:Update*
            Resource: !GetAtt DynamoDBEmailTable.Arn
          - Effect: Allow
            Action: 
              - ses:SendEmail
            Resource: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*
          - Effect: Allow
            Action: 
              - sns:GetTopicAttributes   
            Resource: !Ref SNSTopic
      Roles: 
        - !Ref LambdaRole
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunc 
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic
  LambdaFunc:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
          ZipFile: |
            def handler(event, context):
              print("Hello World")
      Description: "Receive SNS message, trigger SES and DynamoDB"
      FunctionName: csye6225-lambda
      Handler: !Ref HandlerName
      MemorySize: 512
      PackageType: Zip
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Tags: 
        - Key: Name
          Value: SendEmailLambda
      Timeout: 60
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: !GetAtt LambdaFunc.Arn
          Protocol: lambda
      TopicName: csye6225-sns
  EBSKMSKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: KMS key used for EBS encryption
      Enabled: true
      KeyPolicy: 
        Version: 2012-10-17
        Id: key-default-EBS 
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:user/${UserName}
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:  
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
            Action:
              - 'kms:*'
            Resource: '*'
      PendingWindowInDays: 7
  RDSKMSKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: KMS key used for RDS encryption
      Enabled: true
      KeyPolicy: 
        Version: 2012-10-17
        Id: key-default-RDS
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:user/${UserName}
            Action: 'kms:*'
            Resource: '*'
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 7

Mappings:
  AccountMap:
    Account:
      '270484512737': dev
      '269494922587': prod
Parameters:
  Subnet1Zone:
    Description: Subnet1 zone
    Type: String
    Default: us-east-1a
  Subnet1CIDR:
    Description: Subnet1 CIDR
    Type: String
    Default: 10.0.0.0/24
  Subnet2Zone:
    Description: Subnet2 zone
    Type: String
    Default: us-east-1b
  Subnet2CIDR:
    Description: Subnet2 CIDR
    Type: String
    Default: 10.0.1.0/24
  Subnet3Zone:
    Description: Subnet3 zone
    Type: String
    Default: us-east-1c
  Subnet3CIDR:
    Description: Subnet3 CIDR
    Type: String
    Default: 10.0.2.0/24
  Subnet4Zone:
    Description: Subnet4 zone
    Type: String
    Default: us-east-1d
  Subnet4CIDR:
    Description: Subnet4 CIDR
    Type: String
    Default: 10.0.10.0/24
  Subnet5Zone:
    Description: Subnet5 zone
    Type: String
    Default: us-east-1e
  Subnet5CIDR:
    Description: Subnet5 CIDR
    Type: String
    Default: 10.0.11.0/24
  Subnet6Zone:
    Description: Subnet6 zone
    Type: String
    Default: us-east-1f
  Subnet6CIDR:
    Description: Subnet6 CIDR
    Type: String
    Default: 10.0.12.0/24
  ImageId:
    Description: AMI ID
    Type: String
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DomainName:
    Description: Domain name of your personal use.
    Type: String
    Default: kanzhang.me
  DBUsername:
    Description: DB username for mysql.
    Type: String
    Default: csye6225
  DBPassword:
    Description: DB password for mysql.
    Type: String
    Default: zk111111
  SSHLocation:
    Description: ' The IP address range that can be used to access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EnvName:
    Type: String
    Description: 'dev or prod that depends on the account profile'
  UserName:
    Type: String 
    Description: 'Kan_dev or Kan_demo who runs this cloudformation template'
  WebSourceBucket:
    Type: String
    Description: 'The bucket name where stores the source code of web for code deploy'
  HandlerName:
    Type: String
    Description: Handler name used in Lambda function to send SES email
    Default: lambda_handler.lambda_handler
  DynamoTableName:
    Type: String
    Description: Email Table name for DynamoDB 
    Default: csye6225
  SSLCertificate:
    Type: String
    Description: SSL certificate used for load balancer 
    Default: arn:aws:iam::269494922587:server-certificate/ssl_certificate
Outputs:
  # URL:
  #   Value: !Join 
  #     - ''
  #     - - 'http://'
  #       - !GetAtt 
  #         - WebServerInstance
  #         - PublicIp
  #   Description: Newly created application URL
  S3Name:
    Value: !GetAtt Bucket.DomainName